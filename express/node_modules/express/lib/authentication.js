/**
 * Created by wweithers on 6/5/2014.
 */

'use strict';

var exports = module.exports;

//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
// Get the bcrypt plugin.
//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
var crypto = require('bcrypt');
var utils = require('./authUtils.js');
var deferred = require('deferred');

//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
// Variable to store the database object.
//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
var dbObj, UserLoginSchema;

/**
 * Sets the passed object as the database object to use in this module.
 *
 * @method setDBObject
 * @param db {Object} the data base object returned from a Mongoose connection.
 */
// TODO: need a way to ensure we're actually getting a Mongoose data base object.
exports.setDBObject = function (db) {
    if (utils.isUsable(db)) {
        dbObj = db;
    }
};

/**
 * Sets the passed object as the schema to use for user Login.
 *
 * @method setSchema
 * @param schema {Object} the user login schema object returned from a Mongoose object.
 */
exports.setSchema = function (schema) {
    if (utils.isUsable(schema)) {
        UserLoginSchema = schema;
    }
};

exports.validateUser = function (user_name, password, callback) {

    var def = deferred();

    if (utils.isUsable(dbObj)) {
        if (utils.isUsable(user_name, 'as_string')) {
            var user = UserLoginSchema.find({'username': user_name});
            if (utils.isUsable(user)) {
                crypto.compare(password, user.pwd, function (err, res) {
                    if (res === true) {
                        def.resolve();
                    } else {
                        def.reject();
                    }
                });
            } else {
                def.reject();
            }
        }
    }

    return def.promise;
};